postfever.var = paste("chg.ef.ey--erxm.", expected.mat, "days", sep = "")
expected.postfever.vars = c(expected.postfever.vars, postfever.var)
data = data[!is.na(data[, fever.var]), ]
data = data[!is.na(data[, postfever.var]), ]
data[, fever.var] = data[, fever.var] * (365/expected.mat) * 100
data[, postfever.var] = data[, postfever.var] * (365/expected.mat) * 100
rm(list = c("fever.var", "postfever.var"))
}
industry.var = "naics3dig"
corpfin.vars = c("cash--2019", "lev--2019", "environment_score")
data = data[, c("permno", "tic", industry.var, corpfin.vars, socdist.var, realized.fever.vars, realized.postfever.vars, expected.fever.vars, expected.postfever.vars)]
data = data[!is.na(data$naics3dig), ]
expected.var = "chg.sf.ef--erxm.30days"
realized.var = "fever.cum.ff5adj.ret"
#
realized.reversal.var = "restyear.cum.ff5adj.ret"
expected.reversal.var = "chg.ef.ey--erxm.30days"
# #
persistence.var = "chg.sf.ef--erxm.730days"
persistence.reversal.var = "chg.ef.ey--erxm.730days"
data$resilience = "0"
data$resilience[data[, realized.var] < 0 & data[, expected.var] > 0] = "L"
data$resilience[data[, realized.var] > 0 & data[, expected.var] < 0] = "H"
for (resil in c("L", "H", "0")){
y.vars = c(realized.var, expected.var, realized.reversal.var, expected.reversal.var)
reg.data = data[, c("permno", "resilience", industry.var, y.vars)]
reg.data = reg.data[reg.data$resilience == resil, ]
my.res = matrix(nrow = 5, ncol = length(y.vars), NA)
colnames(my.res) = c(y.vars)
rownames(my.res) = c("const", "const.t.rob", "const.t.ind", "std.dev", "firms")
#
for (y.var in y.vars){
reg.dat = na.omit(reg.data[, c("permno", industry.var, y.var)])
colnames(reg.dat) = c("permno", "industry", "y.var")
#
my.res["firms", y.var] = nrow(reg.dat)
my.reg = lm(y.var ~ 1, data = reg.dat)
my.res[c("const"), y.var] = my.reg$coefficients
my.res[c("const.t.rob"), y.var]  = my.reg$coefficients / sqrt(diag(vcovHC(my.reg, type = "HC")))
my.res[c("const.t.ind"), y.var]  = my.reg$coefficients / sqrt(diag(cluster.vcov(my.reg, cbind(reg.dat$industry))))
my.res["std.dev", y.var] = sd(reg.dat[, "y.var"])
rm(my.reg)
rm(reg.dat)
}
if (resil == "L") print("Table 4 -- Panel A")
if (resil == "H") print("Table 4 -- Panel B")
if (resil == "0") print("Table 4 -- Panel C")
print(round(my.res, 2))
rm(reg.data)
}
x.vars = c(corpfin.vars, socdist.var)
print("Table 5 -- will not be identical to the paper, because the environment score is not original data")
for (resil in c("L", "H")){
y.vars = c("fever.cum.ff5adj.ret", "chg.sf.ef--erxm.30days", "restyear.cum.ff5adj.ret", "chg.ef.ey--erxm.30days")
reg.data = data[, c("permno", "resilience", industry.var, y.vars, x.vars)]
reg.data = reg.data[reg.data$resilience == resil, ]
my.res = matrix(nrow = 17, ncol = length(y.vars), NA)
colnames(my.res) = c(y.vars)
rownames(my.res) = c("const", "const.t.rob", "const.t.ind", "cash", "cash.t.rob", "cash.t.ind", "lev", "lev.t.rob", "lev.t.ind", "env", "env.t.rob", "env.t.ind", "dist", "dist.t.rob", "dist.t.ind", "adjr2", "obs")
#
for (y.var in y.vars){
reg.dat = na.omit(reg.data[, c("permno", industry.var, y.var, x.vars)])
colnames(reg.dat) = c("permno", "industry", "y.var", "cash", "lev", "env", "dist")
#
my.res["obs", y.var] = nrow(reg.dat)
my.reg = lm(y.var ~ cash + lev + env + dist, data = reg.dat)
my.res[c("const", "cash", "lev", "env", "dist"), y.var] = my.reg$coefficients
my.res[c("const.t.rob", "cash.t.rob", "lev.t.rob", "env.t.rob", "dist.t.rob"), y.var]  = my.reg$coefficients / sqrt(diag(vcovHC(my.reg, type = "HC")))
my.res[c("const.t.ind", "cash.t.ind", "lev.t.ind", "env.t.ind", "dist.t.ind"), y.var]  = my.reg$coefficients / sqrt(diag(cluster.vcov(my.reg, cbind(reg.dat$industry))))
my.res["adjr2", y.var] = summary(my.reg)$adj.r.squared
rm(my.reg)
rm(reg.dat)
}
print(round(my.res, 2))
rm(reg.data)
}
persistent.vars = c()
for (expected.mat in expected.mats[2:5]){
fever.var = paste("chg.sf.ef--erxm.", expected.mat, "days", sep = "")
postfever.var = paste("chg.ef.ey--erxm.", expected.mat, "days", sep = "")
persistent.var = paste("persist.", expected.mat, "days", sep = "")
persistent.vars = c(persistent.vars, persistent.var)
data[, persistent.var] = data[, fever.var] + data[, postfever.var]
rm(list = c("fever.var", "postfever.var", "persistent.var"))
}
x.vars = c(corpfin.vars, socdist.var)
print("Table 6 -- will not be identical to the paper, because the environment score is not original data")
for (resil in c("L", "H")){
y.vars = persistent.vars
reg.data = data[, c("permno", "resilience", industry.var, y.vars, x.vars)]
reg.data = reg.data[reg.data$resilience == resil, ]
my.res = matrix(nrow = 17, ncol = length(y.vars), NA)
colnames(my.res) = c(y.vars)
rownames(my.res) = c("const", "const.t.rob", "const.t.ind", "cash", "cash.t.rob", "cash.t.ind", "lev", "lev.t.rob", "lev.t.ind", "env", "env.t.rob", "env.t.ind", "dist", "dist.t.rob", "dist.t.ind", "adjr2", "obs")
#
for (y.var in y.vars){
reg.dat = na.omit(reg.data[, c("permno", industry.var, y.var, x.vars)])
colnames(reg.dat) = c("permno", "industry", "y.var", "cash", "lev", "env", "dist")
#
my.res["obs", y.var] = nrow(reg.dat)
my.reg = lm(y.var ~ cash + lev + env + dist, data = reg.dat)
my.res[c("const", "cash", "lev", "env", "dist"), y.var] = my.reg$coefficients
my.res[c("const.t.rob", "cash.t.rob", "lev.t.rob", "env.t.rob", "dist.t.rob"), y.var]  = my.reg$coefficients / sqrt(diag(vcovHC(my.reg, type = "HC")))
my.res[c("const.t.ind", "cash.t.ind", "lev.t.ind", "env.t.ind", "dist.t.ind"), y.var]  = my.reg$coefficients / sqrt(diag(cluster.vcov(my.reg, cbind(reg.dat$industry))))
my.res["adjr2", y.var] = summary(my.reg)$adj.r.squared
rm(my.reg)
rm(reg.dat)
}
print(round(my.res, 2))
rm(reg.data)
}
rm(list = ls()[ls() %in% ls.pre.analysis == FALSE])
gc(reset=TRUE)
ls.pre.analysis = ls()
socdist.var = c("MINUS_affected")
data = xs.data[!is.na(xs.data$sp500.flag.19q4) & xs.data$sp500.flag.19q4 == 1, ]
realized.fms = c("capm", "ff5", "hxz")
expected.mats = c(30, 91, 182, 365, 730)
### ensure that expected and realized returns are available
realized.fever.vars = c()
realized.postfever.vars = c()
for (realized.fm in realized.fms){
fever.var = paste("fever.cum.", realized.fm, "adj.ret", sep = "")
realized.fever.vars = c(realized.fever.vars, fever.var)
postfever.var = paste("restyear.cum.", realized.fm, "adj.ret", sep = "")
realized.postfever.vars = c(realized.postfever.vars, postfever.var)
data = data[!is.na(data[, fever.var]), ]
data = data[!is.na(data[, postfever.var]), ]
data[, fever.var] = data[, fever.var] * 100
data[, postfever.var] = data[, postfever.var] * 100
rm(list = c("fever.var", "postfever.var"))
}
expected.fever.vars = c()
expected.postfever.vars = c()
for (expected.mat in expected.mats){
fever.var = paste("chg.sf.ef--erxm.", expected.mat, "days", sep = "")
expected.fever.vars = c(expected.fever.vars, fever.var)
postfever.var = paste("chg.ef.ey--erxm.", expected.mat, "days", sep = "")
expected.postfever.vars = c(expected.postfever.vars, postfever.var)
data = data[!is.na(data[, fever.var]), ]
data = data[!is.na(data[, postfever.var]), ]
data[, fever.var] = data[, fever.var] * (365/expected.mat) * 100
data[, postfever.var] = data[, postfever.var] * (365/expected.mat) * 100
rm(list = c("fever.var", "postfever.var"))
}
industry.var = "naics3dig"
corpfin.vars = c("cash--2019", "lev--2019", "environment_score")
data = data[, c("permno", "tic", industry.var, corpfin.vars, socdist.var, realized.fever.vars, realized.postfever.vars, expected.fever.vars, expected.postfever.vars)]
data = data[!is.na(data$naics3dig), ]
##### Table 1
y.vars = c(realized.fever.vars, realized.postfever.vars)
x.var = socdist.var
reg.data = data[, c("permno", industry.var, y.vars, x.var)]
#
my.res = matrix(nrow = 8, ncol = length(y.vars), NA)
colnames(my.res) = y.vars
rownames(my.res) = c("const", "const.t.rob", "const.t.ind", "coeff", "coeff.t.rob", "coeff.t.ind", "adjr2", "obs")
#
for (y.var in y.vars){
reg.dat = na.omit(reg.data[, c("permno", industry.var, y.var, x.var)])
colnames(reg.dat) = c("permno", "industry", "y.var", "x.var")
#
my.res["obs", y.var] = nrow(reg.dat)
my.reg = lm(y.var ~ x.var, data = reg.dat)
my.res[c("const", "coeff"), y.var] = my.reg$coefficients
my.res[c("const.t.rob", "coeff.t.rob"), y.var]  = my.reg$coefficients / sqrt(diag(vcovHC(my.reg, type = "HC")))
my.res[c("const.t.ind", "coeff.t.ind"), y.var]  = my.reg$coefficients / sqrt(diag(cluster.vcov(my.reg, cbind(reg.dat$industry))))
my.res["adjr2", y.var] = summary(my.reg)$adj.r.squared
rm(my.reg)
rm(reg.dat)
}
print("Table 1")
print(round(my.res, 2))
##### Cross-sectional regression results using risk-adjusted realized or/and options-implied expected returns
# Table 1: Risk-adjusted returns of stocks with high and low resilience to social distancing
# Table 2: Expected returns in excess of the market of stocks with high and low resilience to social distancing
# Table 3: The relation between expected and realized returns
#
socdist.var = c("MINUS_affected")
ls.pre.analysis = ls()
socdist.var = c("MINUS_affected")
data = xs.data[!is.na(xs.data$sp500.flag.19q4) & xs.data$sp500.flag.19q4 == 1, ]
realized.fms = c("capm", "ff5", "hxz")
expected.mats = c(30, 91, 182, 365, 730)
### ensure that expected and realized returns are available
realized.fever.vars = c()
realized.postfever.vars = c()
for (realized.fm in realized.fms){
fever.var = paste("fever.cum.", realized.fm, "adj.ret", sep = "")
realized.fever.vars = c(realized.fever.vars, fever.var)
postfever.var = paste("restyear.cum.", realized.fm, "adj.ret", sep = "")
realized.postfever.vars = c(realized.postfever.vars, postfever.var)
data = data[!is.na(data[, fever.var]), ]
data = data[!is.na(data[, postfever.var]), ]
data[, fever.var] = data[, fever.var] * 100
data[, postfever.var] = data[, postfever.var] * 100
rm(list = c("fever.var", "postfever.var"))
}
expected.fever.vars = c()
expected.postfever.vars = c()
for (expected.mat in expected.mats){
fever.var = paste("chg.sf.ef--erxm.", expected.mat, "days", sep = "")
expected.fever.vars = c(expected.fever.vars, fever.var)
postfever.var = paste("chg.ef.ey--erxm.", expected.mat, "days", sep = "")
expected.postfever.vars = c(expected.postfever.vars, postfever.var)
data = data[!is.na(data[, fever.var]), ]
data = data[!is.na(data[, postfever.var]), ]
data[, fever.var] = data[, fever.var] * (365/expected.mat) * 100
data[, postfever.var] = data[, postfever.var] * (365/expected.mat) * 100
rm(list = c("fever.var", "postfever.var"))
}
industry.var = "naics3dig"
corpfin.vars = c("cash--2019", "lev--2019", "environment_score")
data = data[, c("permno", "tic", industry.var, corpfin.vars, socdist.var, realized.fever.vars, realized.postfever.vars, expected.fever.vars, expected.postfever.vars)]
data = data[!is.na(data$naics3dig), ]
##### Table 1
y.vars = c(realized.fever.vars, realized.postfever.vars)
x.var = socdist.var
reg.data = data[, c("permno", industry.var, y.vars, x.var)]
#
my.res = matrix(nrow = 8, ncol = length(y.vars), NA)
colnames(my.res) = y.vars
rownames(my.res) = c("const", "const.t.rob", "const.t.ind", "coeff", "coeff.t.rob", "coeff.t.ind", "adjr2", "obs")
#
for (y.var in y.vars){
reg.dat = na.omit(reg.data[, c("permno", industry.var, y.var, x.var)])
colnames(reg.dat) = c("permno", "industry", "y.var", "x.var")
#
my.res["obs", y.var] = nrow(reg.dat)
my.reg = lm(y.var ~ x.var, data = reg.dat)
my.res[c("const", "coeff"), y.var] = my.reg$coefficients
my.res[c("const.t.rob", "coeff.t.rob"), y.var]  = my.reg$coefficients / sqrt(diag(vcovHC(my.reg, type = "HC")))
my.res[c("const.t.ind", "coeff.t.ind"), y.var]  = my.reg$coefficients / sqrt(diag(cluster.vcov(my.reg, cbind(reg.dat$industry))))
my.res["adjr2", y.var] = summary(my.reg)$adj.r.squared
rm(my.reg)
rm(reg.dat)
}
print("Table 1")
print(round(my.res, 2))
# 2. build a character cell "mean [t]★"
fmt_cell <- function(x, var) {
st <- calc_m_t(x[[var]])
sprintf(
"%6.2f [%5.2f]%s",
st$mean, st$t, st$stars
)
}
table2 <- data1 %>%
# 1) keep only the crisis window
filter(plot_date >= as.Date("2020-02-24"),
plot_date <= as.Date("2020-03-20")) %>%
# 2) average daily returns by group & model
group_by(group, model) %>%
summarise(
mean_ret = mean(vw_ret, na.rm = TRUE),
.groups = "drop"
) %>%
# 3) pivot wide so we get columns CAPM, FF5, HXZ
pivot_wider(
names_from  = model,
values_from = mean_ret
) %>%
arrange(group) %>%
# 4) tack on the High−Low row
bind_rows(
summarise(
.,
group = "High−Low",
across(CAPM:HXZ, ~ .[group == "High"] - .[group == "Low"])
)
) %>%
# 5) rename for printing
rename(Portfolio = group)
# 6) show it
kable(
table2,
digits   = 3,
col.names = c("Portfolio", "CAPM", "FF5", "HXZ"),
caption = "Table 2 – Panel A: Mean daily realized returns (24 Feb–20 Mar 2020)"
)
# 1) A little helper that given a numeric vector x of daily returns,
#    computes mean*100, Newey–West t‑stat, and stars
cell <- function(x){
x100 <- na.omit(x) * 100
m    <- mean(x100)
# fit intercept‑only
m0   <- lm(x100 ~ 1)
bw   <- bwAndrews(m0, prewhite = FALSE)
V    <- NeweyWest(m0, lag = bw, prewhite = FALSE)
se   <- sqrt(V[1,1])
t    <- m / se
p    <- 2 * pt(-abs(t), df = length(x100) - 1)
stars <- symnum(p, corr = FALSE,
cutpoints = c(0, 0.01, 0.05, 0.1, 1),
symbols   = c("***","**","*",""))
sprintf("%6.2f [%5.2f]%s", m, t, stars)
}
# 2) The three models in your data1
models <- c("CAPM","FF5","HXZ")
# 3) Build the 2 rows for High / Low
tab <- map_dfr(c("High","Low"), function(g){
df <- data1 %>%
filter(group == g,
plot_date >= as.Date("2020-02-24"),
plot_date <= as.Date("2020-03-20"))
vals <- map_chr(models, ~ cell(df %>% filter(model==.x) %>% pull(vw_ret)))
tibble(Portfolio = paste0(if (g=="High") "High resilience" else "Low resilience"),
!!models[1] := vals[1],
!!models[2] := vals[2],
!!models[3] := vals[3])
})
# 4) High−Low row (difference series still allows Newey–West)
hl <- map_chr(models, function(m){
xh <- data1 %>% filter(group=="High", model==m,
plot_date >= as.Date("2020-02-24"),
plot_date <= as.Date("2020-03-20")) %>% pull(vw_ret)
xl <- data1 %>% filter(group=="Low",  model==m,
plot_date >= as.Date("2020-02-24"),
plot_date <= as.Date("2020-03-20")) %>% pull(vw_ret)
cell(xh - xl)
})
hl_tab <- tibble(
Portfolio = "High−Low resilience",
CAPM  = hl[1],
FF5   = hl[2],
HXZ   = hl[3]
)
# 5) Combine and print
final_tab <- bind_rows(tab, hl_tab)
kable(
final_tab,
col.names = c("Portfolio", "CAPM", "FF5", "HXZ"),
align     = c("l","r","r","r"),
caption   = "Table 2 – Panel A: Mean daily returns × 100 [Newey–West t‑stats] (24 Feb–20 Mar 2020)"
)
# 1) helper to compute “mean [t‑stat]***” for a return series
make_cell <- function(x){
v  <- na.omit(x) * 100
m  <- mean(v)
m0 <- lm(v ~ 1)
bw <- bwAndrews(m0, prewhite = FALSE)
se <- sqrt(NeweyWest(m0, lag = bw, prewhite = FALSE)[1,1])
t  <- m / se
p  <- 2 * pt(-abs(t), df = length(v) - 1)
stars <- ifelse(p < 0.01, "***",
ifelse(p < 0.05, "**",
ifelse(p < 0.10, "*", "")))
sprintf("%5.2f [%5.2f]%s", m, t, stars)
}
# 2) grab the crisis window
window <- as.Date(c("2020-02-24","2020-03-20"))
# 3) summary for High & Low
tbl_A <- data1 %>%
filter(between(plot_date, window[1], window[2])) %>%
group_by(group, model) %>%
summarise(cell = make_cell(vw_ret), .groups="drop") %>%
pivot_wider(names_from = model, values_from = cell)
# 4) add the High–Low row in exactly the same format
hl_row <- data1 %>%
filter(between(plot_date, window[1], window[2])) %>%
group_by(model) %>%
summarise(cell = make_cell(
vw_ret[group=="High"] - vw_ret[group=="Low"]
), .groups="drop") %>%
pivot_wider(names_from = model, values_from = cell) %>%
mutate(group = "High−Low resilience")
# 5) bind & print
final_A <- bind_rows(tbl_A, hl_row) %>%
rename(Portfolio = group)
kable(
final_A,
align     = c("l","r","r","r"),
col.names = c("Portfolio","CAPM","FF5","HXZ"),
caption   = "Table 2 – Panel A: Mean daily returns × 100 [Newey–West t‑stats] (24 Feb–20 Mar 2020)"
)
# Function to compute "mean [t‑stat] ***"
format_table <- function(x){
v  <- na.omit(x) * 100
m  <- mean(v)
m0 <- lm(v ~ 1)
bw <- bwAndrews(m0, prewhite = FALSE) # optimal truncation lag as suggested by Andrews (1991)
se <- sqrt(NeweyWest(m0, lag = bw, prewhite = FALSE)[1,1]) # t-statistics based on standard errors following Newey and West (1987)
t  <- m / se
p  <- 2 * pt(-abs(t), df = length(v) - 1)
stars <- ifelse(p < 0.01, "***",
ifelse(p < 0.05, "**",
ifelse(p < 0.10, "*", "")))
sprintf("%5.2f [%5.2f]%s", m, t, stars) # format stats
}
# Define crisis window
# from day after Italy introduced its lockdown (2020-02-24)
# to the last trading day before the Fed announced its intervention (2020-03-20)
window <- as.Date(c("2020-02-24","2020-03-20"))
# Summary for High & Low
table_HL <- data1 %>%
filter(between(plot_date, window[1], window[2])) %>%
group_by(group, model) %>%
summarize(cell = format_table(vw_ret), .groups="drop") %>%
pivot_wider(names_from = model, values_from = cell)
# Summary for High-minus-Low
table_diff <- data1 %>%
filter(between(plot_date, window[1], window[2])) %>%
group_by(model) %>%
summarize(cell = format_table(
vw_ret[group=="High"] - vw_ret[group=="Low"]
), .groups="drop") %>%
pivot_wider(names_from = model, values_from = cell) %>%
mutate(group = "High−Low resilience")
# 5) bind & print
final_A <- bind_rows(table_HL, table_diff) %>%
rename(Portfolio = group)
kable(
final_A,
align     = c("l","r","r","r"),
col.names = c("Portfolio","CAPM","FF5","HXZ"),
caption   = "Panel A. Resilience based on ‘affected share’ as in Koren and Pet̋o (2020)"
)
# Summary for High & Low
table_HL <- data1 %>%
filter(between(plot_date, window[1], window[2]),
group != "HXZ") %>%
group_by(group, model) %>%
summarize(cell = format_table(vw_ret),
.groups="drop") %>%
pivot_wider(names_from = model, values_from = cell)
kable(
final_A,
align     = c("l","r","r"),
col.names = c("Portfolio","CAPM","FF5"),
caption   = "Panel A. Resilience based on ‘affected share’ as in Koren and Pet̋o (2020)"
)
# Function to compute "mean [t‑stat] ***"
format_table <- function(x){
v  <- na.omit(x) * 100
m  <- mean(v)
m0 <- lm(v ~ 1)
bw <- bwAndrews(m0, prewhite = FALSE) # optimal truncation lag as suggested by Andrews (1991)
se <- sqrt(NeweyWest(m0, lag = bw, prewhite = FALSE)[1,1]) # t-statistics based on standard errors following Newey and West (1987)
t  <- m / se
p  <- 2 * pt(-abs(t), df = length(v) - 1)
stars <- ifelse(p < 0.01, "***",
ifelse(p < 0.05, "**",
ifelse(p < 0.10, "*", "")))
sprintf("%5.2f [%5.2f]%s", m, t, stars) # format stats
}
# Define crisis window
# from day after Italy introduced its lockdown (2020-02-24)
# to the last trading day before the Fed announced its intervention (2020-03-20)
window <- as.Date(c("2020-02-24","2020-03-20"))
# Summary for High & Low
table_HL <- data1 %>%
filter(between(plot_date, window[1], window[2]),
group != "HXZ") %>%
group_by(group, model) %>%
summarize(cell = format_table(vw_ret),
.groups="drop") %>%
pivot_wider(names_from = model, values_from = cell)
# Summary for High-minus-Low
table_diff <- data1 %>%
filter(between(plot_date, window[1], window[2]),
group != "HXZ") %>%
group_by(model) %>%
summarize(cell = format_table(
vw_ret[group=="High"] - vw_ret[group=="Low"]
),
.groups="drop") %>%
pivot_wider(names_from = model, values_from = cell) %>%
mutate(group = "High−Low resilience")
# 5) bind & print
final_A <- bind_rows(table_HL, table_diff) %>%
rename(Portfolio = group)
kable(
final_A,
align     = c("l","r","r"),
col.names = c("Portfolio","CAPM","FF5"),
caption   = "Panel A. Resilience based on ‘affected share’ as in Koren and Pet̋o (2020)"
)
kable(
final_A,
align     = c("l","r","r","r"),
col.names = c("Portfolio","CAPM","FF5"),
caption   = "Panel A. Resilience based on ‘affected share’ as in Koren and Pet̋o (2020)"
)
final_A
table_HL <- data1 %>%
filter(between(plot_date, window[1], window[2]),
model != "HXZ") %>%
group_by(group, model) %>%
summarize(cell = format_table(vw_ret),
.groups="drop") %>%
pivot_wider(names_from = model, values_from = cell)
# Summary for High-minus-Low
table_diff <- data1 %>%
filter(between(plot_date, window[1], window[2]),
model != "HXZ") %>%
group_by(model) %>%
summarize(cell = format_table(
vw_ret[group=="High"] - vw_ret[group=="Low"]
),
.groups="drop") %>%
pivot_wider(names_from = model, values_from = cell) %>%
mutate(group = "High−Low resilience")
# 5) bind & print
final_A <- bind_rows(table_HL, table_diff) %>%
rename(Portfolio = group)
final_A
kable(
final_A,
align     = c("l","r","r"),
col.names = c("Portfolio","CAPM","FF5"),
caption   = "Panel A. Resilience based on ‘affected share’ as in Koren and Pet̋o (2020)"
)
